{
  "設計思想": {
    "全体概要": "Project NifercheのWebフロントエンドはReact(typescript)によるSPA構成。Amplifyでのバックエンド連携（ユーザー認証・GraphQL・Storage）を想定し、堅牢かつ拡張性のあるアーキテクチャを目指す。コンポーネントの再利用・レイアウトの抽象化・Context/Hooksによる状態管理など、保守性と拡張性を意識したモジュール分割を行っている。",
    "方針": [
      "ユースケース（世界観の閲覧、設定資料の表示、ユーザー投稿/ギャラリー機能等）に応じて、「pages/」「components/」「theme/」などを明確に分割。",
      "React Routerを用いた複数レイアウト構成 (MainLayout, CallLayout, LaboratoryLayout, LibraryLayout, MaterialsRootLayout など) によるページのレイアウト差別化。",
      "Amplify Context (SessionContext) で認証状態をグローバル管理し、ProtectedRoute.tsx等で認可を制御。",
      "UIはAWS Amplify UIライブラリをベースにしつつ、独自themeを適用しブランド性を持たせる。",
      "バックエンド未完成（AWS）だが将来対応を想定し、services/ や hooks/ としてAPI呼び出し部分を分離設計。"
    ]
  },

  "技術スタック": {
    "フロントエンド": [
      "React (v18 以上想定)",
      "TypeScript",
      "React Router v6 でルーティング管理",
      "AWS Amplify UI React (認証UIやUIコンポーネント群)",
      "Vite: ビルド・ローカルサーバ用"
    ],
    "バックエンド想定（未完部分を含む）": [
      "AWS Amplify（Auth, Data, Storage）",
      "GraphQL API（Amplify DataのdefineData機能）",
      "S3 (Amplify Storage) でファイル管理",
      "Cognito (Amplify Auth) で認証管理",
      "DynamoDB (Amplify Dataのモデル定義) でデータ保持想定"
    ],
    "その他": [
      "Helmet / react-helmet-async（SEO用のメタタグ制御）",
      "ESLint / Prettier (開発者の好みにより導入想定)",
      "npm or yarn (依存管理)"
    ]
  },

  "主要な機能": {
    "ユーザー認証": [
      "Amplify Authを用いたSignUp/SignIn/ConfirmSignUp。",
      "SessionContextでトークンや属性を管理し、ProtectedRouteでアクセス制御を行う。"
    ],
    "コンテンツ表示": [
      "メインストーリーやサイドストーリーの閲覧（StoryViewerやContentDisplayなど）",
      "図書館(Library)ページ、研究所(Laboratory)ページ、資料(Materials)ページなど複数レイアウトを用意",
      "ギャラリー機能 (GalleryPage, GalleryDetailPage) - 画像一覧と詳細表示"
    ],
    "設定資料管理": [
      "MaterialsLayout (各世界ごとの資料Quxe,Hodemei,Alsarejia,Common...)",
      "DocumentCard/DocumentFilterによりカテゴリやタグでフィルタリング",
      "AdvancedFilterPanelを使った複合検索"
    ],
    "お気に入り/プロフィール": [
      "FavoritesPage: ユーザーのお気に入りコンテンツ一覧",
      "ProfilePage: ユーザー情報の表示・編集（将来的にはGraphQL連携）"
    ],
    "管理者用機能": [
      "AdminDashboardPage (ProtectedRouteでアクセスLevel='admin'をチェック)",
      "管理者がコンテンツの審査、ユーザー管理を行う予定（実装は未完成）"
    ],
    "バッジ機能（概念実装）": [
      "useBadgesやBadgeContextで、ユーザーの行動トリガーに応じたバッジ獲得を想定",
      "BadgeNotificationでバッジ獲得通知をUI表示 (今後拡張予定)"
    ]
  },

  "実装状況": {
    "フロントエンド(React)": "ほぼ完成状態。各ページやコンポーネントが整備されており、レイアウトやUIの流れは機能する。",
    "認証周り": "Amplify UIのAuthenticator、SessionContextを使ってログイン状態を管理中。SignUp, SignIn, ConfirmSignUpのページあり。",
    "ページ・ルーティング": "routes(Route)定義はApp.tsxに集中。各Layoutコンポーネントを用いて画面構成差別化。404, ErrorPage, ProtectedRouteなど基本機能OK。",
    "AWS Amplify連携(データ系)": "amplifyフォルダでのdefineData()によりGraphQLスキーマを定義済み。ただし実際のAWSへのデプロイ・動作検証は未了。",
    "AWS Amplify連携(Storage)": "services/storage.tsx でAmplify Storage操作のラッパ実装。UI側のアップロード/ダウンロードの流れはサンプルレベルである程度実装。"
  },

  "今後のタスク・改善が必要な点": [
    {
      "タスク": "バックエンド（Amplify Data/GraphQL）の本番連携",
      "詳細": "Amplify CLIでpushし、DynamoDBテーブルやAPIを実際に構築。フロントhooks(useContentやuseInfiniteContents等)がMockではなく本番APIと接続されるように設定。"
    },
    {
      "タスク": "Storage (S3) のアクセス権限検証",
      "詳細": "storage/resource.ts で設定しているパスベースのaclが正しく動作するか確認する必要がある。ファイルアップロード時のセキュリティ確認。"
    },
    {
      "タスク": "バッジ機能の実運用",
      "詳細": "BadgeProgress, Badgeテーブルの作成と、具体的にいつどうやってユーザーにBadgeを付与するのかルールを固める。UI通知やバッジ表示部分の拡張。"
    },
    {
      "タスク": "検索・フィルタリング強化",
      "詳細": "AdvancedFilterPanelを実際にバックエンド(ElasticsearchやAppSync search)と連携し、複合条件検索を実装したい。"
    },
    {
      "タスク": "UI/UXの微調整",
      "詳細": "デザインの洗練、レスポンシブ動作検証、アクセシビリティ(キーボード操作やスクリーンリーダー対応)の調整。"
    },
    {
      "タスク": "動的コンテンツの国際化（i18n）",
      "詳細": "日本語以外のユーザー向けに翻訳対応を導入する場合、React i18nライブラリを利用する必要がある。"
    },
    {
      "タスク": "運用体制（CI/CD）",
      "詳細": "Amplify ConsoleやGitHub Actions等での自動ビルド/デプロイのワークフローを整備。"
    }
  ],

  "コードマップ(ディレクトリと各実装の簡易説明)": {
    "front_end_src": {
      "ディレクトリ構成": [
        "src/ ・・・フロントエンドアプリのメインソース",
        "┗ App.tsx / index.css / main.tsx",
        "   ┣ components/ ・・・UIコンポーネント群",
        "   ┣ pages/       ・・・画面・ページ単位のコンポーネント",
        "   ┣ contexts/    ・・・React Context (認証・バッジ等)",
        "   ┣ hooks/       ・・・React Hooks (データ取得/InfiniteScroll等)",
        "   ┣ services/    ・・・Amplifyや外部APIと連携するサービス層",
        "   ┣ theme/       ・・・テーマ定義（Laboratory用テーマ等）",
        "   ┣ types/       ・・・アプリで使う型定義",
        "   ┣ utils/       ・・・汎用ユーティリティ",
        "   ┗ assets/      ・・・画像ファイル等"
      ],
      "ファイル詳細_一部抜粋": {
        "App.tsx": "React Routerのルート構成が集約。LayoutsとPagesを繋ぎ込んでいる。",
        "main.tsx": "アプリのエントリーポイント。Amplifyの初期設定・HelmetProviderをラップ。",
        "contexts/SessionContext.tsx": "Amplify Authenticatorと連携し、サインイン状態などを管理するコンテキスト。",
        "contexts/BadgeContext.tsx": "バッジ獲得状況チェックのためのContext。useBadges()を内包。",
        "hooks/useContent.tsx": "ContentモデルのCRUD操作やStorage操作をラップ。未完成（Mock多し）。",
        "hooks/useInfiniteContents.tsx": "無限スクロール的にコンテンツをページング取得するためのHooks。Amplify Data連携想定。",
        "services/storage.tsx": "Amplify StorageのgetUrl, uploadData等をまとめたラッパ。",
        "services/mockStorage.ts": "実際のAWS S3代わりのダミー実装（ローカルテスト用）。",
        "theme/index.tsx": "メインテーマ(niferche-theme)の定義。色や間隔などがtokensとしてまとめられている。",
        "theme/laboratoryTheme.tsx": "研究所(Laboratory)用のダーク風テーマ。背景色や文字色の変更。",
        "components/layout/*": "Layout系 (MainLayout, CallLayout, LibraryLayout, LaboratoryLayout, etc.)でページの枠組みを切り替え。",
        "components/common/*": "BreadcrumbNav, ContentCard, DetailModal, LoadingSpinnerなどの汎用UI。",
        "components/content/*": "StoryViewerやContentDisplayなど特定機能UI。",
        "pages/*": "各ページ単位。例: library/MainStory.tsx, gallery/GalleryPage.tsx etc."
      }
    },

    "amplify_backend": {
      "ディレクトリ構成": [
        "amplify/",
        " ┣ auth/ (Cognito設定)",
        " ┣ data/ (GraphQLスキーマやモデル定義)",
        " ┣ storage/ (S3バケットの定義とアクセス権)",
        " ┣ backend.ts (Amplifyリソースをまとめるエントリ)",
        " ┣ package.json (type:module など)",
        " ┗ tsconfig.json"
      ],
      "auth/resource.ts": "Cognitoのユーザープール、メール認証、ユーザー属性などの設定。",
      "data/resource.ts": "defineData()によりContentやUserProfile, Badge, BadgeProgress等のGraphQLモデルを定義している。認可ルールも指定。",
      "storage/resource.ts": "S3のパスベースアクセス制御を設定。公式コンテンツやユーザー共有コンテンツを分割管理。",
      "backend.ts": "auth, data, storageを集約し、最終的にamplifyでデプロイ可能な形にまとめる。"
    }
  }
}
