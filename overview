Project Niferche - コードベース全体ドキュメント

本ドキュメントは、プロジェクトのフォルダ構成・ソースコードを俯瞰しやすく整理したものです。
以下のセクションを順に参照することで、機能の所在からデータモデル、開発環境、今後の拡張などを把握できます。

1. 機能・記述のマッピング

認証関連 (Authentication)
Amplify認証設定
amplify/auth/resource.ts
Cognito User Pool の設定、検証メール本文や多要素認証 (MFA) のオフ設定など。
フロントエンド・認証フロー
src/contexts/SessionContext.tsx
AWS Amplify UI の Authenticator と連動したセッション管理 (サインイン/サインアップ/サインアウト)。
src/components/auth/ProtectedRoute.tsx
ルートガード機能。ログイン必須ページで未認証ユーザーをリダイレクト。
src/pages/system/auth/SignInPage.tsx / SignUpPage.tsx / ConfirmSignUpPage.tsx
UI 付きのサインイン/サインアップ/確認コード入力フォーム。
src/services/auth.ts
Amplify の Auth 関数 (signUp, confirmSignUp 等) をラップしたサービス層。
データ登録・管理 (Amplify Data)
Amplify Data (GraphQL スキーマ)
amplify/data/resource.ts
Content, Comment, UserProfile, Badge, BadgeProgress 等が定義された Amplify CLI Gen2 スキーマ。
認可ルール (owner, group, publicApiKey, authenticated) が付与されている。
GraphQL モデル操作
src/hooks/useContent.tsx, src/hooks/useBadges.ts, src/services/auth.ts 等
Amplify generateClient() を使用して AppSync GraphQL API を呼び出し、各モデル (Content, Badge など) の CRUD を実装。
ストレージ関連 (Storage)
Amplify ストレージ設定
amplify/storage/resource.ts
S3 バケットへのパスごとのアクセス制御 (admin グループに書き込み権限, guest は read など) を設定。
フロントエンド ストレージ操作
src/services/storage.tsx
aws-amplify/storage の各種 API (getUrl, uploadData, list, remove など) をラップ。
src/services/mockStorage.tsx
本番連携が整うまでのモック実装。テスト用のダミーデータを返却。
UI 共通コンポーネント
共通的に使われるコンポーネント (src/components/common/)
Meta.tsx, ContentCard.tsx, ContentSection.tsx, BreadcrumbNav.tsx, FavoriteButton.tsx, ErrorBoundary.tsx など。
例: ErrorBoundary.tsx はアプリ全体の例外をキャッチし、エラーページへのリダイレクトを実行。
例: Meta.tsx は react-helmet-async を使った SEO メタタグ設定。
コンテンツ関連コンポーネント (src/components/content/)
StoryViewer.tsx: 章ごとのテキストファイルを読み込み、章移動を可能にする小説ビューア。
ContentDisplay.tsx: S3 等に置かれた画像 or テキストを読み込んで表示。
DetailModal.tsx: 各種詳細をモーダル表示。
ページ (pages)
src/pages/system/...
認証 (SignInPage, SignUpPage など) と利用規約 (TermsPage), 権利表記 (RightsPage), 404/エラーページ (NotFoundPage, ErrorPage)。
src/pages/laboratory/...
研究所に関連するページ (LaboratoryPage, IdeaLibrary, ArchivePage, GuidePage など)。
src/pages/materials/...
設定資料系 (CommonSettings, QuxeMaterials, HodemeiMaterials, AlsarejiaMaterials, MaterialsAbout)。
src/pages/library/...
物語のメイン/サイドストーリー (MainStory, SideStory など) と、ライブラリ概要 (LibraryOverviewPage, LibraryPage)。
src/pages/call/...
「Call」セクションのページ (AboutPage, PhilosophyPage, NewsPage)。
src/pages/gallery/...
ギャラリー (GalleryPage): イラストやファンアートの一覧。
レイアウトコンポーネント
src/components/layout/...
MainLayout.tsx, LibraryLayout.tsx, LaboratoryLayout.tsx, MaterialsLayout.tsx, CallLayout.tsx, AuthLayout.tsx など
それぞれ該当するセクションページの共通ヘッダ/フッタ/ナビゲーションを管理。
バッジ機能
src/contexts/BadgeContext.tsx, src/hooks/useBadges.ts
ユーザーが特定アクションをした際のバッジ取得・進捗管理を行う。
2. ディレクトリ構造の概要

以下は主要フォルダのみを簡潔にまとめています。

Project-Niferche/
├── amplify/
│   ├── auth/             # Amplify Auth(Cognito)設定
│   ├── data/             # Amplify Data(API, GraphQL)設定
│   ├── storage/          # Amplify Storage(S3)設定
│   ├── backend.ts        # Amplify CLI Gen2 バックエンド定義まとめ
│   └── ...               # その他 tsconfig や resourceファイル
├── public/
│   └── images/           # 静的ファイル(画像)など
├── src/
│   ├── pages/            # ルーティング単位のReactコンポーネント群
│   ├── components/       # 再利用可能なReactコンポーネント
│   ├── contexts/         # React Context (SessionContext, BadgeContext等)
│   ├── hooks/            # カスタムフック (useBadges, useContent等)
│   ├── services/         # API呼び出しやストレージ操作、認証等のサービス層
│   ├── theme/            # カスタムUIテーマ (Amplify UIテーマ拡張)
│   ├── types/            # TypeScript型定義ファイル群
│   ├── utils/            # 汎用的ユーティリティ (cache.tsxなど)
│   ├── App.tsx           # ルーティング設定, <Routes>/<Route>の定義
│   └── main.tsx          # ReactDOM.renderのエントリポイント
├── package.json
├── vite.config.ts
└── amplify.yml           # Amplify Console CI/CD 用設定 (npm ci -> npm run build)
ディレクトリ/ファイル	役割
amplify/	Amplify CLI Gen2 形式のバックエンド設定 (Auth, Storage, Data, etc.)
public/	画像・静的ファイルを置くフォルダ。ビルド後も直リンク/images/...でアクセス可能。
src/pages/	画面ごとにコンポーネントを配置。React Router により URL と対応している。
src/components/	ページ間で共通利用するUIパーツやレイアウトコンポーネント、各種モーダルなど。
src/contexts/	アプリケーションスコープで状態管理 (SessionContext, BadgeContext 等)
src/services/	ストレージ操作や認証、GraphQL クライアント等のビジネスロジック/外部接続層
src/hooks/	カスタムフック群 (useBadges, useContentなど)
src/theme/	Amplify UIテーマの定義, 各種テーマファイル。
src/types/	TypeScript 型定義ファイル群。
src/utils/	汎用的なキャッシュ (cache.tsx)・ストレージユーティリティなど。
App.tsx	React ルートのエントリポイント、<Routes> を宣言。
main.tsx	ReactDOM のレンダリング開始箇所。Amplify.configure 等を実行。
3. フロントエンドのページ遷移関係・画面フロー

src/App.tsx のルーティング解析 (React Router v6)
<Routes>
  {/* 認証関連 */}
  <Route path="/auth">
    <Route path="signin" element={<SignInPage />} />
    <Route path="signup" element={<SignUpPage />} />
    <Route path="confirm" element={<ConfirmSignUpPage />} />
  </Route>

  {/* Call Section */}
  <Route element={<CallLayout />}>
    <Route path="/call/about" element={<AboutPage />} />
    <Route path="/call/philosophy" element={<PhilosophyPage />} />
    <Route path="/call/news" element={<NewsPage />} />
  </Route>

  {/* Library Section */}
  <Route element={<LibraryLayout />}>
    <Route path="/library" element={<LibraryOverviewPage />} />
    <Route path="/library/mainstory" element={<MainStory />} />
    <Route path="/library/sidestory" element={<SideStory />} />
  </Route>

  {/* Laboratory Section */}
  <Route element={<ThemeProvider theme={laboratoryTheme}><LaboratoryLayout /></ThemeProvider>}>
    <Route path="/laboratory/about" element={<LaboratoryPage />} />
    <Route path="/laboratory/observation" element={<ObservationPage />} />
    <Route path="/laboratory/archive" element={<ArchivePage />} />
    <Route path="/laboratory/guide" element={<GuidePage />} />
  </Route>

  {/* Materials Section */}
  <Route element={<MaterialsLayout />}>
    <Route path="/materials/about" element={<MaterialsAbout />} />
    <Route path="/materials/common" element={<CommonSettings />} />
    <Route path="/materials/quxe" element={<QuxeMaterials />} />
    <Route path="/materials/hodemei" element={<HodemeiMaterials />} />
    <Route path="/materials/alsarejia" element={<AlsarejiaMaterials />} />
  </Route>

  {/* Gallery Section */}
  <Route element={<MainLayout />}>
    <Route path="/" element={<MainPage />} />
    <Route path="/gallery" element={<GalleryPage />} />
    <Route path="/rights" element={<RightsPage />} />
  </Route>

  {/* Auth Section (Layout) */}
  <Route path="/auth/*" element={<AuthLayout />}>
    <Route path="signin" element={<SignInPage />} />
    <Route path="signup" element={<SignUpPage />} />
    <Route path="confirm" element={<ConfirmSignUpPage />} />
  </Route>

  {/* Error Routes */}
  <Route path="/error" element={<ErrorPage />} />
  <Route path="*" element={<NotFoundPage />} />

  {/* 要認証ページ */}
  <Route
    path="/profile"
    element={
      <ProtectedRoute>
        <ProfilePage />
      </ProtectedRoute>
    }
  />
</Routes>
CallLayout にラップされたルート: /call/～
LibraryLayout にラップされたルート: /library/～
LaboratoryLayout にラップされたルート: /laboratory/～
MaterialsLayout にラップされたルート: /materials/～
MainLayout にラップされたルート: / (トップ), /gallery, /rights 等
AuthLayout にラップされたルート: /auth/signin, /auth/signup, /auth/confirm など
ProtectedRoute によるルートガード: /profile (ログイン必須)
NotFoundPage ('*') へのフォールバック
ページ間の遷移としては、NavigationHeader から各セクションへ移動するケースが多いほか、一部 Button や Link での直接遷移あり。

4. バックエンドの構成・現状と将来像

Amplify の Auth / API / Storage / 他 AWS サービスとの連携
認証フロー
Cognito User Pool + Identity Pool を使用。
amplify_outputs.json に記載がある通り、未認証ユーザー (guest) が有効 (unauthenticated_identities_enabled)。
メールアドレスを Username としてサインアップ → 検証コードによる認証 (email verification)。
API (AppSync GraphQL)
Amplify Data で定義 (amplify/data/resource.ts)。
Content, Comment, UserProfile, Badge, BadgeProgress 等のモデル。デフォルト認証は userPool (Cognito)、API KEY も 30 日有効期限で利用可。
Storage (S3)
amplify/storage/resource.ts に各プレフィックス (official/, shared/, system/, temp/ etc.) ごとのアクセス権限を設定。
Admin グループは書き込み・削除、Guest は読み取りのみなどが細かく定義されている。
今後の拡張可能性
Adminユーザーのロール追加
既に UserProfile.role で admin があるため、管理者画面や ProtectedRoute でのアクセス制御を拡張可能。
S3へのファイルアップロード
StorageService や Amplify CLI の uploadData/getUrl を介したアップロードが既に実装。今後 UI からの操作画面を整備すると良い。
AWS Lambda / カスタムリゾルバー
大規模な処理を行いたい場合やバッチ処理が必要な場合に追加が検討可能。
5. 使用しているデータモデル

Amplify Data (GraphQLスキーマ)
amplify/data/resource.ts 内に定義されている主なモデル:

Content
物語や資料など「コンテンツ」全般を一元管理する想定。
title, description, primaryCategory, status, ownerId などの基本情報 + S3 参照キー (mainKey, thumbnailKey)。
Comment
contentId に紐づくコメントモデル。authorId, status など。
UserProfile
ユーザー固有情報。nickname, email, role(user|admin), badges, favorites, createdAt, updatedAt など。
Badge
バッジ定義。name, description, requirementType, isSecret, priority など。
BadgeProgress
ユーザーごとのバッジ取得進捗。userId, badgeId, progress, isCompleted 等。
TypeScript インターフェース
src/types/* にプロジェクト独自の型が定義されている:
laboratory.ts, materials.ts, badges.ts, auth.ts など。
改善ポイント例

Content モデルと MaterialDocument などの重複
Content は GraphQL で定義、MaterialDocument はフロント用インターフェースで似た役割を担っている。どちらかに統合/調整し、冗長性を下げられるか検討。
Content の status/visibility が複数箇所で重複
ReduxやContextでは使われていないが、TS enum としてさらにまとめる余地あり。
Naming ルール
Amplify モデルの命名 (Content, BadgeProgress) と UI 側の命名 (MaterialDocument, UserBadgeProgress) が混在するため、一貫性を持たせるとメンテしやすい。
6. 開発環境

package.json の Scripts
"scripts": {
  "dev": "vite",        // 開発用ローカルサーバ (Hot Reload)
  "build": "tsc && vite build", // TypeScriptコンパイル + Viteビルド
  "preview": "vite preview"     // ビルド後のプレビュー
}
Node バージョン: 特に .nvmrc 等は見当たらないため、Amplify標準の Node.js バージョンで動作している想定。
Lint/Formatter:
ESLint (.eslintrc.cjs) + TypeScriptルールが設定されている。
Prettierなどのフォーマッタ設定はファイル上では確認できず。(おそらく導入は任意)
Amplify Console / CI/CD
amplify.yml
Version 2 形式で、npm ci → npm run build → dist をデプロイする流れ。
もし Amplify Console 連携の場合、ブランチ連携による自動デプロイも可。
7. 追加で確認すべき事項

1) テスト・品質保証
テストコードの有無
フォルダ内に __tests__ や *.test.tsx 等は見当たらない。単体テストは未整備の可能性が高い。
今後 Jest や Vitest などでカバレッジを確保すると良い。
2) セキュリティ周り
Secrets / IAM
Amplifyコンソールで Cognito, AppSync, S3 などのリソースを自動生成。認可ポリシーは CLI で管理。
.env や機密情報のハードコードは見られない（import.meta.env.VITE_... による読み込みあり）。
追加で、本番運用時には .env/Secrets Manager や Amplify Environment Variables で機密を管理するのが望ましい。
3) 運用監視
ログ/モニタリング
Amplify Console のビルドログや CloudWatch Logs が利用可能と推測。
大規模運用ではさらに CloudWatch アラームや S3 アクセスログなども検討。
まとめ

このプロジェクトは React + Vite + AWS Amplify (Cognito, AppSync, S3) による構成で、認証/データ/ストレージをフルマネージドで扱いながら、複数のセクション (Call, Library, Laboratory, Materials, Gallery) を展開しています。
フロントエンドは各セクション専用のレイアウトが割り当てられ、ページ遷移とグローバルな認証・セッション管理が行われています。データモデルとしては Content / UserProfile / Badge などを中心に管理し、フロント側には独自インターフェースが散見されます。
将来的には Admin ロールの管理画面や S3 へのアップロード画面の充実、テストの追加整備などが望まれます。全体としては、Amplify を活用した標準的なクラウドネイティブ構成になっているといえます。